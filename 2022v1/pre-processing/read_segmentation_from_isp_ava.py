# -*- coding: utf-8 -*-
"""Read-Segmentation-from-ISP-AVA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nPJrZQThj5A2ZRj1T0tspn6-LlkVzSn9
"""

# Commented out IPython magic to ensure Python compatibility.
from pydicom.data import get_testdata_file
from pydicom import dcmread
from pydicom.datadict import dictionary_VR
from hexdump import hexdump

# import netfleece
import json
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

# https://gitlab.com/malie-library/netfleece
# https://stackoverflow.com/questions/17996701/binary-deserialization-without-object-definition


import os

import json
import csv

def decode_file(dim1, dir1, raw_bytes2, file_type='v'):
    cnt = 0
    clue2 = raw_bytes2[dim1[2]*1024:]
    all_pts = []
    
    for j in range(dim1[2]):
        pts = []
        for idx, bt in enumerate(raw_bytes2[j*1024:(j+1)*1024]):
            pq = []
            n1 = int(bt)
            if n1 == 0:
                continue
            x1 = int(idx/2)
            for i in range(0, n1):
                y1 = int(clue2[cnt+i*2])
                y2 = int(clue2[cnt+i*2+1])

                if y2 % 2 == 0:
                    pq.append((y1, x1, y2))
                else:
                    pq.append((y1+256, x1, y2))
            cnt += n1*2

            flag = 0
            last = -1
            for pp in pq:
                if(pp[2] >= 128):
                    if flag == 1:
                        for k in range(last+1, pp[0]):
                            pts.append((k, pp[1]))
                    else:
                        flag = 1
                    pts.append((pp[0], pp[1]))
                    last = pp[0]
                else:
                    if flag == 1:
                        for k in range(last+1, pp[0]):
                            pts.append((k, pp[1]))
                    pts.append((pp[0], pp[1]))
                    for i in range(int(pp[2]/4)):
                        pts.append((pp[0]+i+1, pp[1]))
                    flag = 0


        # print('Slice: '+str(j)+' Count: '+str(cnt))
        # print(pts)
        # N = 50
        for pt in pts:
            all_pts.append((j, pt[1], pt[0]))

#         x = [p[0] for p in pts]
#         y = [p[1] for p in pts]
#         colors = ['red' for i in range(len(x))]
#         area = 0.01

#         fig = plt.figure(1, figsize=(10,10))
#         plt.scatter(x, y, s=area, c=colors, alpha=0.8)
#         plt.xlim(0, 512)
#         plt.ylim(0, 512)
#         plt.gca().invert_yaxis()
#         plt.show()
        
    if file_type == 'v':
        with open(dir1+'_seg_new'+'.json', 'w') as outf:
            outf.write(json.dumps(all_pts))
    

        with open(dir1+'_seg_new'+'.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(all_pts)
    elif file_type == 'c':
        with open(dir1+'_seg_new_c'+'.json', 'w') as outf:
            outf.write(json.dumps(all_pts))
    

        with open(dir1+'_seg_new_c'+'.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerows(all_pts)

def explore_AVA_dicom_centerlines(dir1):
    centerline_list = []
    cnt = 0
    for filename in os.listdir(dir1):
        try:
            ds1 = dcmread(dir1+'/'+filename)
#             print(filename)
#             print(ds1[0x0010, 0x0020])
#             print(ds1[0x0020, 0x4000])
#             print(ds1[0x00e1, 0x1047])
#             print(ds1[0x07a1, 0x1012])
            
            try:
                
                raw_list = ds1[0x07a1, 0x1012].value
                raw_list = raw_list[:]
                new_list = []
                for i in range( int(len(raw_list)/3) ):
                    new_list.append([raw_list[3*i], raw_list[3*i+1], raw_list[3*i+2]])

                
                center_points = new_list[0::3]
                normal_vectors = new_list[1::3]
                centerline_list.append((ds1[0x0020, 0x4000].value, cnt, center_points, normal_vectors))
                cnt += 1
            
            except:
                # print('err')
                continue
            
        except:
            # print('err')
            pass
    
    return cnt, centerline_list

def get_bifurcation_line(line_1, line_2):
    bi_id = -1
    for i, pt1 in enumerate(line_1):
        for j, pt2 in enumerate(line_2):
            if pt1 == pt2:
                bi_id = i
    return bi_id, line_1[bi_id]

dir_name = 'D:\\pelvic CTA\\ISP-AVA_autoseg_results'
for dir2 in os.listdir(dir_name):
    for dir1 in os.listdir(dir_name+'/'+dir2):
        try:
            for filename in os.listdir(dir_name+'/'+dir2+'/'+dir1):
                try:                    
                    ds1 = dcmread(dir_name+'/'+dir2+'/'+dir1+'/'+filename)
                    # print(ds1[0x0010, 0x0020].value)
                    # print(filename + ': ' + ds1[0x0020, 0x4000].value)
                    ptid = ds1[0x0010, 0x0020].value
                    
                    if ds1[0x0020, 0x4000].value == 'Vessels':
                        # print(ds1)
                        dim1 = ds1[0x07a1, 0x1007].value
                        raw_bytes2 = ds1[0x07a1, 0x1009].value[:]
                        decode_file(dim1, ptid, raw_bytes2)
                        print(ds1[0x07a1, 0x1007].value)
                    elif ds1[0x0020, 0x4000].value == 'Calcification':
                        dim1 = ds1[0x07a1, 0x1007].value
                        raw_bytes2 = ds1[0x07a1, 0x1009].value[:]
                        decode_file(dim1, ptid, raw_bytes2, file_type='c')
                        print(ds1[0x07a1, 0x1007].value)
                    
                        
                except:
                    continue
        except:
            continue
        try:
            cnt = -1
            centerline_list = []
            cnt, centerline_list = explore_AVA_dicom_centerlines(dir_name+'/'+dir2+'/'+dir1)
            # print(cnt)
            bi_pt = []
            L_ext = []
            R_ext = []
            L_ext_n = []
            R_ext_n = []
            for vessel in centerline_list:
                if vessel[0] == 'Aorta':
                    bi_pt = vessel[2][-1]
                elif vessel[0] == 'Aorta and Right Iliac':
                    R_ext = vessel[2][:]
                    R_ext_n = vessel[3][:]
                    continue
                elif vessel[0] == 'Aorta and Left Iliac':
                    L_ext = vessel[2][:]
                    L_ext_n = vessel[3][:]
                    continue

            bi_id, bi_pt = get_bifurcation_line(R_ext, L_ext)
            print("ID: " + str(dir2))
            print(bi_pt)
        except:
            continue


